mod game;
mod guesser;
mod pattern;

use std::{
    collections::HashMap,
    ops::{Deref, DerefMut},
};

use game::Game;
use pattern::Color;

fn main() {
    let game = Game::new(
        3,
        vec![0, 1, 2, 1, 2, 2]
            .into_iter()
            .map(|num: u8| Color(num))
            .collect(),
    );
}

mod test {

    #[rustfmt::skip]
    // 3x2 Feedback table
    const feedback_table: [[(u8, u8); 9]; 9]= [
        [(0, 2), (0, 1), (0, 1), (0, 1), (0, 0), (0, 0), (0, 1), (0, 0), (0, 0)], // RR
        [(0, 1), (0, 2), (0, 1), (2, 0), (0, 1), (1, 0), (1, 0), (0, 1), (0, 0)], // RG
        [(0, 1), (0, 1), (0, 2), (1, 0), (0, 0), (0, 1), (2, 0), (1, 0), (0, 1)], // RB
        [(0, 1), (2, 0), (1, 0), (0, 2), (0, 1), (0, 1), (0, 1), (1, 0), (0, 0)], // GR
        [(0, 0), (0, 1), (0, 0), (0, 1), (0, 2), (0, 1), (0, 0), (0, 1), (0, 0)], // GG
        [(0, 0), (1, 0), (0, 1), (0, 1), (0, 1), (0, 2), (0, 0), (1, 0), (0, 1)], // GB
        [(0, 1), (1, 0), (2, 0), (0, 1), (0, 0), (0, 0), (0, 2), (0, 1), (0, 1)], // BR
        [(0, 0), (0, 1), (1, 0), (1, 0), (0, 1), (1, 0), (0, 1), (0, 2), (0, 1)], // BG
        [(0, 0), (0, 0), (0, 1), (0, 0), (0, 0), (0, 1), (0, 1), (0, 1), (0, 2)], // BB
    ];
}
